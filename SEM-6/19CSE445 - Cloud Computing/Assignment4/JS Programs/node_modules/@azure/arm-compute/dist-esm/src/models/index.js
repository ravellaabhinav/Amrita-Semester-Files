/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProximityPlacementGroupType} that the service accepts. */
export var KnownProximityPlacementGroupType;
(function (KnownProximityPlacementGroupType) {
    KnownProximityPlacementGroupType["Standard"] = "Standard";
    KnownProximityPlacementGroupType["Ultra"] = "Ultra";
})(KnownProximityPlacementGroupType || (KnownProximityPlacementGroupType = {}));
/** Known values of {@link HyperVGenerationTypes} that the service accepts. */
export var KnownHyperVGenerationTypes;
(function (KnownHyperVGenerationTypes) {
    KnownHyperVGenerationTypes["V1"] = "V1";
    KnownHyperVGenerationTypes["V2"] = "V2";
})(KnownHyperVGenerationTypes || (KnownHyperVGenerationTypes = {}));
/** Known values of {@link VmDiskTypes} that the service accepts. */
export var KnownVmDiskTypes;
(function (KnownVmDiskTypes) {
    KnownVmDiskTypes["None"] = "None";
    KnownVmDiskTypes["Unmanaged"] = "Unmanaged";
})(KnownVmDiskTypes || (KnownVmDiskTypes = {}));
/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export var KnownExtendedLocationTypes;
(function (KnownExtendedLocationTypes) {
    KnownExtendedLocationTypes["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationTypes || (KnownExtendedLocationTypes = {}));
/** Known values of {@link VirtualMachineSizeTypes} that the service accepts. */
export var KnownVirtualMachineSizeTypes;
(function (KnownVirtualMachineSizeTypes) {
    KnownVirtualMachineSizeTypes["BasicA0"] = "Basic_A0";
    KnownVirtualMachineSizeTypes["BasicA1"] = "Basic_A1";
    KnownVirtualMachineSizeTypes["BasicA2"] = "Basic_A2";
    KnownVirtualMachineSizeTypes["BasicA3"] = "Basic_A3";
    KnownVirtualMachineSizeTypes["BasicA4"] = "Basic_A4";
    KnownVirtualMachineSizeTypes["StandardA0"] = "Standard_A0";
    KnownVirtualMachineSizeTypes["StandardA1"] = "Standard_A1";
    KnownVirtualMachineSizeTypes["StandardA2"] = "Standard_A2";
    KnownVirtualMachineSizeTypes["StandardA3"] = "Standard_A3";
    KnownVirtualMachineSizeTypes["StandardA4"] = "Standard_A4";
    KnownVirtualMachineSizeTypes["StandardA5"] = "Standard_A5";
    KnownVirtualMachineSizeTypes["StandardA6"] = "Standard_A6";
    KnownVirtualMachineSizeTypes["StandardA7"] = "Standard_A7";
    KnownVirtualMachineSizeTypes["StandardA8"] = "Standard_A8";
    KnownVirtualMachineSizeTypes["StandardA9"] = "Standard_A9";
    KnownVirtualMachineSizeTypes["StandardA10"] = "Standard_A10";
    KnownVirtualMachineSizeTypes["StandardA11"] = "Standard_A11";
    KnownVirtualMachineSizeTypes["StandardA1V2"] = "Standard_A1_v2";
    KnownVirtualMachineSizeTypes["StandardA2V2"] = "Standard_A2_v2";
    KnownVirtualMachineSizeTypes["StandardA4V2"] = "Standard_A4_v2";
    KnownVirtualMachineSizeTypes["StandardA8V2"] = "Standard_A8_v2";
    KnownVirtualMachineSizeTypes["StandardA2MV2"] = "Standard_A2m_v2";
    KnownVirtualMachineSizeTypes["StandardA4MV2"] = "Standard_A4m_v2";
    KnownVirtualMachineSizeTypes["StandardA8MV2"] = "Standard_A8m_v2";
    KnownVirtualMachineSizeTypes["StandardB1S"] = "Standard_B1s";
    KnownVirtualMachineSizeTypes["StandardB1Ms"] = "Standard_B1ms";
    KnownVirtualMachineSizeTypes["StandardB2S"] = "Standard_B2s";
    KnownVirtualMachineSizeTypes["StandardB2Ms"] = "Standard_B2ms";
    KnownVirtualMachineSizeTypes["StandardB4Ms"] = "Standard_B4ms";
    KnownVirtualMachineSizeTypes["StandardB8Ms"] = "Standard_B8ms";
    KnownVirtualMachineSizeTypes["StandardD1"] = "Standard_D1";
    KnownVirtualMachineSizeTypes["StandardD2"] = "Standard_D2";
    KnownVirtualMachineSizeTypes["StandardD3"] = "Standard_D3";
    KnownVirtualMachineSizeTypes["StandardD4"] = "Standard_D4";
    KnownVirtualMachineSizeTypes["StandardD11"] = "Standard_D11";
    KnownVirtualMachineSizeTypes["StandardD12"] = "Standard_D12";
    KnownVirtualMachineSizeTypes["StandardD13"] = "Standard_D13";
    KnownVirtualMachineSizeTypes["StandardD14"] = "Standard_D14";
    KnownVirtualMachineSizeTypes["StandardD1V2"] = "Standard_D1_v2";
    KnownVirtualMachineSizeTypes["StandardD2V2"] = "Standard_D2_v2";
    KnownVirtualMachineSizeTypes["StandardD3V2"] = "Standard_D3_v2";
    KnownVirtualMachineSizeTypes["StandardD4V2"] = "Standard_D4_v2";
    KnownVirtualMachineSizeTypes["StandardD5V2"] = "Standard_D5_v2";
    KnownVirtualMachineSizeTypes["StandardD2V3"] = "Standard_D2_v3";
    KnownVirtualMachineSizeTypes["StandardD4V3"] = "Standard_D4_v3";
    KnownVirtualMachineSizeTypes["StandardD8V3"] = "Standard_D8_v3";
    KnownVirtualMachineSizeTypes["StandardD16V3"] = "Standard_D16_v3";
    KnownVirtualMachineSizeTypes["StandardD32V3"] = "Standard_D32_v3";
    KnownVirtualMachineSizeTypes["StandardD64V3"] = "Standard_D64_v3";
    KnownVirtualMachineSizeTypes["StandardD2SV3"] = "Standard_D2s_v3";
    KnownVirtualMachineSizeTypes["StandardD4SV3"] = "Standard_D4s_v3";
    KnownVirtualMachineSizeTypes["StandardD8SV3"] = "Standard_D8s_v3";
    KnownVirtualMachineSizeTypes["StandardD16SV3"] = "Standard_D16s_v3";
    KnownVirtualMachineSizeTypes["StandardD32SV3"] = "Standard_D32s_v3";
    KnownVirtualMachineSizeTypes["StandardD64SV3"] = "Standard_D64s_v3";
    KnownVirtualMachineSizeTypes["StandardD11V2"] = "Standard_D11_v2";
    KnownVirtualMachineSizeTypes["StandardD12V2"] = "Standard_D12_v2";
    KnownVirtualMachineSizeTypes["StandardD13V2"] = "Standard_D13_v2";
    KnownVirtualMachineSizeTypes["StandardD14V2"] = "Standard_D14_v2";
    KnownVirtualMachineSizeTypes["StandardD15V2"] = "Standard_D15_v2";
    KnownVirtualMachineSizeTypes["StandardDS1"] = "Standard_DS1";
    KnownVirtualMachineSizeTypes["StandardDS2"] = "Standard_DS2";
    KnownVirtualMachineSizeTypes["StandardDS3"] = "Standard_DS3";
    KnownVirtualMachineSizeTypes["StandardDS4"] = "Standard_DS4";
    KnownVirtualMachineSizeTypes["StandardDS11"] = "Standard_DS11";
    KnownVirtualMachineSizeTypes["StandardDS12"] = "Standard_DS12";
    KnownVirtualMachineSizeTypes["StandardDS13"] = "Standard_DS13";
    KnownVirtualMachineSizeTypes["StandardDS14"] = "Standard_DS14";
    KnownVirtualMachineSizeTypes["StandardDS1V2"] = "Standard_DS1_v2";
    KnownVirtualMachineSizeTypes["StandardDS2V2"] = "Standard_DS2_v2";
    KnownVirtualMachineSizeTypes["StandardDS3V2"] = "Standard_DS3_v2";
    KnownVirtualMachineSizeTypes["StandardDS4V2"] = "Standard_DS4_v2";
    KnownVirtualMachineSizeTypes["StandardDS5V2"] = "Standard_DS5_v2";
    KnownVirtualMachineSizeTypes["StandardDS11V2"] = "Standard_DS11_v2";
    KnownVirtualMachineSizeTypes["StandardDS12V2"] = "Standard_DS12_v2";
    KnownVirtualMachineSizeTypes["StandardDS13V2"] = "Standard_DS13_v2";
    KnownVirtualMachineSizeTypes["StandardDS14V2"] = "Standard_DS14_v2";
    KnownVirtualMachineSizeTypes["StandardDS15V2"] = "Standard_DS15_v2";
    KnownVirtualMachineSizeTypes["StandardDS134V2"] = "Standard_DS13-4_v2";
    KnownVirtualMachineSizeTypes["StandardDS132V2"] = "Standard_DS13-2_v2";
    KnownVirtualMachineSizeTypes["StandardDS148V2"] = "Standard_DS14-8_v2";
    KnownVirtualMachineSizeTypes["StandardDS144V2"] = "Standard_DS14-4_v2";
    KnownVirtualMachineSizeTypes["StandardE2V3"] = "Standard_E2_v3";
    KnownVirtualMachineSizeTypes["StandardE4V3"] = "Standard_E4_v3";
    KnownVirtualMachineSizeTypes["StandardE8V3"] = "Standard_E8_v3";
    KnownVirtualMachineSizeTypes["StandardE16V3"] = "Standard_E16_v3";
    KnownVirtualMachineSizeTypes["StandardE32V3"] = "Standard_E32_v3";
    KnownVirtualMachineSizeTypes["StandardE64V3"] = "Standard_E64_v3";
    KnownVirtualMachineSizeTypes["StandardE2SV3"] = "Standard_E2s_v3";
    KnownVirtualMachineSizeTypes["StandardE4SV3"] = "Standard_E4s_v3";
    KnownVirtualMachineSizeTypes["StandardE8SV3"] = "Standard_E8s_v3";
    KnownVirtualMachineSizeTypes["StandardE16SV3"] = "Standard_E16s_v3";
    KnownVirtualMachineSizeTypes["StandardE32SV3"] = "Standard_E32s_v3";
    KnownVirtualMachineSizeTypes["StandardE64SV3"] = "Standard_E64s_v3";
    KnownVirtualMachineSizeTypes["StandardE3216V3"] = "Standard_E32-16_v3";
    KnownVirtualMachineSizeTypes["StandardE328SV3"] = "Standard_E32-8s_v3";
    KnownVirtualMachineSizeTypes["StandardE6432SV3"] = "Standard_E64-32s_v3";
    KnownVirtualMachineSizeTypes["StandardE6416SV3"] = "Standard_E64-16s_v3";
    KnownVirtualMachineSizeTypes["StandardF1"] = "Standard_F1";
    KnownVirtualMachineSizeTypes["StandardF2"] = "Standard_F2";
    KnownVirtualMachineSizeTypes["StandardF4"] = "Standard_F4";
    KnownVirtualMachineSizeTypes["StandardF8"] = "Standard_F8";
    KnownVirtualMachineSizeTypes["StandardF16"] = "Standard_F16";
    KnownVirtualMachineSizeTypes["StandardF1S"] = "Standard_F1s";
    KnownVirtualMachineSizeTypes["StandardF2S"] = "Standard_F2s";
    KnownVirtualMachineSizeTypes["StandardF4S"] = "Standard_F4s";
    KnownVirtualMachineSizeTypes["StandardF8S"] = "Standard_F8s";
    KnownVirtualMachineSizeTypes["StandardF16S"] = "Standard_F16s";
    KnownVirtualMachineSizeTypes["StandardF2SV2"] = "Standard_F2s_v2";
    KnownVirtualMachineSizeTypes["StandardF4SV2"] = "Standard_F4s_v2";
    KnownVirtualMachineSizeTypes["StandardF8SV2"] = "Standard_F8s_v2";
    KnownVirtualMachineSizeTypes["StandardF16SV2"] = "Standard_F16s_v2";
    KnownVirtualMachineSizeTypes["StandardF32SV2"] = "Standard_F32s_v2";
    KnownVirtualMachineSizeTypes["StandardF64SV2"] = "Standard_F64s_v2";
    KnownVirtualMachineSizeTypes["StandardF72SV2"] = "Standard_F72s_v2";
    KnownVirtualMachineSizeTypes["StandardG1"] = "Standard_G1";
    KnownVirtualMachineSizeTypes["StandardG2"] = "Standard_G2";
    KnownVirtualMachineSizeTypes["StandardG3"] = "Standard_G3";
    KnownVirtualMachineSizeTypes["StandardG4"] = "Standard_G4";
    KnownVirtualMachineSizeTypes["StandardG5"] = "Standard_G5";
    KnownVirtualMachineSizeTypes["StandardGS1"] = "Standard_GS1";
    KnownVirtualMachineSizeTypes["StandardGS2"] = "Standard_GS2";
    KnownVirtualMachineSizeTypes["StandardGS3"] = "Standard_GS3";
    KnownVirtualMachineSizeTypes["StandardGS4"] = "Standard_GS4";
    KnownVirtualMachineSizeTypes["StandardGS5"] = "Standard_GS5";
    KnownVirtualMachineSizeTypes["StandardGS48"] = "Standard_GS4-8";
    KnownVirtualMachineSizeTypes["StandardGS44"] = "Standard_GS4-4";
    KnownVirtualMachineSizeTypes["StandardGS516"] = "Standard_GS5-16";
    KnownVirtualMachineSizeTypes["StandardGS58"] = "Standard_GS5-8";
    KnownVirtualMachineSizeTypes["StandardH8"] = "Standard_H8";
    KnownVirtualMachineSizeTypes["StandardH16"] = "Standard_H16";
    KnownVirtualMachineSizeTypes["StandardH8M"] = "Standard_H8m";
    KnownVirtualMachineSizeTypes["StandardH16M"] = "Standard_H16m";
    KnownVirtualMachineSizeTypes["StandardH16R"] = "Standard_H16r";
    KnownVirtualMachineSizeTypes["StandardH16Mr"] = "Standard_H16mr";
    KnownVirtualMachineSizeTypes["StandardL4S"] = "Standard_L4s";
    KnownVirtualMachineSizeTypes["StandardL8S"] = "Standard_L8s";
    KnownVirtualMachineSizeTypes["StandardL16S"] = "Standard_L16s";
    KnownVirtualMachineSizeTypes["StandardL32S"] = "Standard_L32s";
    KnownVirtualMachineSizeTypes["StandardM64S"] = "Standard_M64s";
    KnownVirtualMachineSizeTypes["StandardM64Ms"] = "Standard_M64ms";
    KnownVirtualMachineSizeTypes["StandardM128S"] = "Standard_M128s";
    KnownVirtualMachineSizeTypes["StandardM128Ms"] = "Standard_M128ms";
    KnownVirtualMachineSizeTypes["StandardM6432Ms"] = "Standard_M64-32ms";
    KnownVirtualMachineSizeTypes["StandardM6416Ms"] = "Standard_M64-16ms";
    KnownVirtualMachineSizeTypes["StandardM12864Ms"] = "Standard_M128-64ms";
    KnownVirtualMachineSizeTypes["StandardM12832Ms"] = "Standard_M128-32ms";
    KnownVirtualMachineSizeTypes["StandardNC6"] = "Standard_NC6";
    KnownVirtualMachineSizeTypes["StandardNC12"] = "Standard_NC12";
    KnownVirtualMachineSizeTypes["StandardNC24"] = "Standard_NC24";
    KnownVirtualMachineSizeTypes["StandardNC24R"] = "Standard_NC24r";
    KnownVirtualMachineSizeTypes["StandardNC6SV2"] = "Standard_NC6s_v2";
    KnownVirtualMachineSizeTypes["StandardNC12SV2"] = "Standard_NC12s_v2";
    KnownVirtualMachineSizeTypes["StandardNC24SV2"] = "Standard_NC24s_v2";
    KnownVirtualMachineSizeTypes["StandardNC24RsV2"] = "Standard_NC24rs_v2";
    KnownVirtualMachineSizeTypes["StandardNC6SV3"] = "Standard_NC6s_v3";
    KnownVirtualMachineSizeTypes["StandardNC12SV3"] = "Standard_NC12s_v3";
    KnownVirtualMachineSizeTypes["StandardNC24SV3"] = "Standard_NC24s_v3";
    KnownVirtualMachineSizeTypes["StandardNC24RsV3"] = "Standard_NC24rs_v3";
    KnownVirtualMachineSizeTypes["StandardND6S"] = "Standard_ND6s";
    KnownVirtualMachineSizeTypes["StandardND12S"] = "Standard_ND12s";
    KnownVirtualMachineSizeTypes["StandardND24S"] = "Standard_ND24s";
    KnownVirtualMachineSizeTypes["StandardND24Rs"] = "Standard_ND24rs";
    KnownVirtualMachineSizeTypes["StandardNV6"] = "Standard_NV6";
    KnownVirtualMachineSizeTypes["StandardNV12"] = "Standard_NV12";
    KnownVirtualMachineSizeTypes["StandardNV24"] = "Standard_NV24";
})(KnownVirtualMachineSizeTypes || (KnownVirtualMachineSizeTypes = {}));
/** Known values of {@link DiffDiskOptions} that the service accepts. */
export var KnownDiffDiskOptions;
(function (KnownDiffDiskOptions) {
    KnownDiffDiskOptions["Local"] = "Local";
})(KnownDiffDiskOptions || (KnownDiffDiskOptions = {}));
/** Known values of {@link DiffDiskPlacement} that the service accepts. */
export var KnownDiffDiskPlacement;
(function (KnownDiffDiskPlacement) {
    KnownDiffDiskPlacement["CacheDisk"] = "CacheDisk";
    KnownDiffDiskPlacement["ResourceDisk"] = "ResourceDisk";
})(KnownDiffDiskPlacement || (KnownDiffDiskPlacement = {}));
/** Known values of {@link DiskCreateOptionTypes} that the service accepts. */
export var KnownDiskCreateOptionTypes;
(function (KnownDiskCreateOptionTypes) {
    KnownDiskCreateOptionTypes["FromImage"] = "FromImage";
    KnownDiskCreateOptionTypes["Empty"] = "Empty";
    KnownDiskCreateOptionTypes["Attach"] = "Attach";
})(KnownDiskCreateOptionTypes || (KnownDiskCreateOptionTypes = {}));
/** Known values of {@link StorageAccountTypes} that the service accepts. */
export var KnownStorageAccountTypes;
(function (KnownStorageAccountTypes) {
    KnownStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    KnownStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    KnownStorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
    KnownStorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
    KnownStorageAccountTypes["PremiumZRS"] = "Premium_ZRS";
    KnownStorageAccountTypes["StandardSSDZRS"] = "StandardSSD_ZRS";
})(KnownStorageAccountTypes || (KnownStorageAccountTypes = {}));
/** Known values of {@link SecurityEncryptionTypes} that the service accepts. */
export var KnownSecurityEncryptionTypes;
(function (KnownSecurityEncryptionTypes) {
    KnownSecurityEncryptionTypes["VMGuestStateOnly"] = "VMGuestStateOnly";
    KnownSecurityEncryptionTypes["DiskWithVMGuestState"] = "DiskWithVMGuestState";
})(KnownSecurityEncryptionTypes || (KnownSecurityEncryptionTypes = {}));
/** Known values of {@link DiskDeleteOptionTypes} that the service accepts. */
export var KnownDiskDeleteOptionTypes;
(function (KnownDiskDeleteOptionTypes) {
    KnownDiskDeleteOptionTypes["Delete"] = "Delete";
    KnownDiskDeleteOptionTypes["Detach"] = "Detach";
})(KnownDiskDeleteOptionTypes || (KnownDiskDeleteOptionTypes = {}));
/** Known values of {@link DiskDetachOptionTypes} that the service accepts. */
export var KnownDiskDetachOptionTypes;
(function (KnownDiskDetachOptionTypes) {
    KnownDiskDetachOptionTypes["ForceDetach"] = "ForceDetach";
})(KnownDiskDetachOptionTypes || (KnownDiskDetachOptionTypes = {}));
/** Known values of {@link WindowsVMGuestPatchMode} that the service accepts. */
export var KnownWindowsVMGuestPatchMode;
(function (KnownWindowsVMGuestPatchMode) {
    KnownWindowsVMGuestPatchMode["Manual"] = "Manual";
    KnownWindowsVMGuestPatchMode["AutomaticByOS"] = "AutomaticByOS";
    KnownWindowsVMGuestPatchMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownWindowsVMGuestPatchMode || (KnownWindowsVMGuestPatchMode = {}));
/** Known values of {@link WindowsPatchAssessmentMode} that the service accepts. */
export var KnownWindowsPatchAssessmentMode;
(function (KnownWindowsPatchAssessmentMode) {
    KnownWindowsPatchAssessmentMode["ImageDefault"] = "ImageDefault";
    KnownWindowsPatchAssessmentMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownWindowsPatchAssessmentMode || (KnownWindowsPatchAssessmentMode = {}));
/** Known values of {@link LinuxVMGuestPatchMode} that the service accepts. */
export var KnownLinuxVMGuestPatchMode;
(function (KnownLinuxVMGuestPatchMode) {
    KnownLinuxVMGuestPatchMode["ImageDefault"] = "ImageDefault";
    KnownLinuxVMGuestPatchMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownLinuxVMGuestPatchMode || (KnownLinuxVMGuestPatchMode = {}));
/** Known values of {@link LinuxPatchAssessmentMode} that the service accepts. */
export var KnownLinuxPatchAssessmentMode;
(function (KnownLinuxPatchAssessmentMode) {
    KnownLinuxPatchAssessmentMode["ImageDefault"] = "ImageDefault";
    KnownLinuxPatchAssessmentMode["AutomaticByPlatform"] = "AutomaticByPlatform";
})(KnownLinuxPatchAssessmentMode || (KnownLinuxPatchAssessmentMode = {}));
/** Known values of {@link DeleteOptions} that the service accepts. */
export var KnownDeleteOptions;
(function (KnownDeleteOptions) {
    KnownDeleteOptions["Delete"] = "Delete";
    KnownDeleteOptions["Detach"] = "Detach";
})(KnownDeleteOptions || (KnownDeleteOptions = {}));
/** Known values of {@link NetworkApiVersion} that the service accepts. */
export var KnownNetworkApiVersion;
(function (KnownNetworkApiVersion) {
    KnownNetworkApiVersion["TwoThousandTwenty1101"] = "2020-11-01";
})(KnownNetworkApiVersion || (KnownNetworkApiVersion = {}));
/** Known values of {@link IPVersions} that the service accepts. */
export var KnownIPVersions;
(function (KnownIPVersions) {
    KnownIPVersions["IPv4"] = "IPv4";
    KnownIPVersions["IPv6"] = "IPv6";
})(KnownIPVersions || (KnownIPVersions = {}));
/** Known values of {@link PublicIPAllocationMethod} that the service accepts. */
export var KnownPublicIPAllocationMethod;
(function (KnownPublicIPAllocationMethod) {
    KnownPublicIPAllocationMethod["Dynamic"] = "Dynamic";
    KnownPublicIPAllocationMethod["Static"] = "Static";
})(KnownPublicIPAllocationMethod || (KnownPublicIPAllocationMethod = {}));
/** Known values of {@link PublicIPAddressSkuName} that the service accepts. */
export var KnownPublicIPAddressSkuName;
(function (KnownPublicIPAddressSkuName) {
    KnownPublicIPAddressSkuName["Basic"] = "Basic";
    KnownPublicIPAddressSkuName["Standard"] = "Standard";
})(KnownPublicIPAddressSkuName || (KnownPublicIPAddressSkuName = {}));
/** Known values of {@link PublicIPAddressSkuTier} that the service accepts. */
export var KnownPublicIPAddressSkuTier;
(function (KnownPublicIPAddressSkuTier) {
    KnownPublicIPAddressSkuTier["Regional"] = "Regional";
    KnownPublicIPAddressSkuTier["Global"] = "Global";
})(KnownPublicIPAddressSkuTier || (KnownPublicIPAddressSkuTier = {}));
/** Known values of {@link SecurityTypes} that the service accepts. */
export var KnownSecurityTypes;
(function (KnownSecurityTypes) {
    KnownSecurityTypes["TrustedLaunch"] = "TrustedLaunch";
    KnownSecurityTypes["ConfidentialVM"] = "ConfidentialVM";
})(KnownSecurityTypes || (KnownSecurityTypes = {}));
/** Known values of {@link VirtualMachinePriorityTypes} that the service accepts. */
export var KnownVirtualMachinePriorityTypes;
(function (KnownVirtualMachinePriorityTypes) {
    KnownVirtualMachinePriorityTypes["Regular"] = "Regular";
    KnownVirtualMachinePriorityTypes["Low"] = "Low";
    KnownVirtualMachinePriorityTypes["Spot"] = "Spot";
})(KnownVirtualMachinePriorityTypes || (KnownVirtualMachinePriorityTypes = {}));
/** Known values of {@link VirtualMachineEvictionPolicyTypes} that the service accepts. */
export var KnownVirtualMachineEvictionPolicyTypes;
(function (KnownVirtualMachineEvictionPolicyTypes) {
    KnownVirtualMachineEvictionPolicyTypes["Deallocate"] = "Deallocate";
    KnownVirtualMachineEvictionPolicyTypes["Delete"] = "Delete";
})(KnownVirtualMachineEvictionPolicyTypes || (KnownVirtualMachineEvictionPolicyTypes = {}));
/** Known values of {@link HyperVGenerationType} that the service accepts. */
export var KnownHyperVGenerationType;
(function (KnownHyperVGenerationType) {
    KnownHyperVGenerationType["V1"] = "V1";
    KnownHyperVGenerationType["V2"] = "V2";
})(KnownHyperVGenerationType || (KnownHyperVGenerationType = {}));
/** Known values of {@link PatchOperationStatus} that the service accepts. */
export var KnownPatchOperationStatus;
(function (KnownPatchOperationStatus) {
    KnownPatchOperationStatus["Unknown"] = "Unknown";
    KnownPatchOperationStatus["InProgress"] = "InProgress";
    KnownPatchOperationStatus["Failed"] = "Failed";
    KnownPatchOperationStatus["Succeeded"] = "Succeeded";
    KnownPatchOperationStatus["CompletedWithWarnings"] = "CompletedWithWarnings";
})(KnownPatchOperationStatus || (KnownPatchOperationStatus = {}));
/** Known values of {@link RepairAction} that the service accepts. */
export var KnownRepairAction;
(function (KnownRepairAction) {
    KnownRepairAction["Replace"] = "Replace";
    KnownRepairAction["Restart"] = "Restart";
    KnownRepairAction["Reimage"] = "Reimage";
})(KnownRepairAction || (KnownRepairAction = {}));
/** Known values of {@link IPVersion} that the service accepts. */
export var KnownIPVersion;
(function (KnownIPVersion) {
    KnownIPVersion["IPv4"] = "IPv4";
    KnownIPVersion["IPv6"] = "IPv6";
})(KnownIPVersion || (KnownIPVersion = {}));
/** Known values of {@link VirtualMachineScaleSetScaleInRules} that the service accepts. */
export var KnownVirtualMachineScaleSetScaleInRules;
(function (KnownVirtualMachineScaleSetScaleInRules) {
    KnownVirtualMachineScaleSetScaleInRules["Default"] = "Default";
    KnownVirtualMachineScaleSetScaleInRules["OldestVM"] = "OldestVM";
    KnownVirtualMachineScaleSetScaleInRules["NewestVM"] = "NewestVM";
})(KnownVirtualMachineScaleSetScaleInRules || (KnownVirtualMachineScaleSetScaleInRules = {}));
/** Known values of {@link OrchestrationMode} that the service accepts. */
export var KnownOrchestrationMode;
(function (KnownOrchestrationMode) {
    KnownOrchestrationMode["Uniform"] = "Uniform";
    KnownOrchestrationMode["Flexible"] = "Flexible";
})(KnownOrchestrationMode || (KnownOrchestrationMode = {}));
/** Known values of {@link OperatingSystemType} that the service accepts. */
export var KnownOperatingSystemType;
(function (KnownOperatingSystemType) {
    KnownOperatingSystemType["Windows"] = "Windows";
    KnownOperatingSystemType["Linux"] = "Linux";
})(KnownOperatingSystemType || (KnownOperatingSystemType = {}));
/** Known values of {@link ConsistencyModeTypes} that the service accepts. */
export var KnownConsistencyModeTypes;
(function (KnownConsistencyModeTypes) {
    KnownConsistencyModeTypes["CrashConsistent"] = "CrashConsistent";
    KnownConsistencyModeTypes["FileSystemConsistent"] = "FileSystemConsistent";
    KnownConsistencyModeTypes["ApplicationConsistent"] = "ApplicationConsistent";
})(KnownConsistencyModeTypes || (KnownConsistencyModeTypes = {}));
/** Known values of {@link RestorePointCollectionExpandOptions} that the service accepts. */
export var KnownRestorePointCollectionExpandOptions;
(function (KnownRestorePointCollectionExpandOptions) {
    KnownRestorePointCollectionExpandOptions["RestorePoints"] = "restorePoints";
})(KnownRestorePointCollectionExpandOptions || (KnownRestorePointCollectionExpandOptions = {}));
/** Known values of {@link RestorePointExpandOptions} that the service accepts. */
export var KnownRestorePointExpandOptions;
(function (KnownRestorePointExpandOptions) {
    KnownRestorePointExpandOptions["InstanceView"] = "instanceView";
})(KnownRestorePointExpandOptions || (KnownRestorePointExpandOptions = {}));
/** Known values of {@link CapacityReservationGroupInstanceViewTypes} that the service accepts. */
export var KnownCapacityReservationGroupInstanceViewTypes;
(function (KnownCapacityReservationGroupInstanceViewTypes) {
    KnownCapacityReservationGroupInstanceViewTypes["InstanceView"] = "instanceView";
})(KnownCapacityReservationGroupInstanceViewTypes || (KnownCapacityReservationGroupInstanceViewTypes = {}));
/** Known values of {@link ExpandTypesForGetCapacityReservationGroups} that the service accepts. */
export var KnownExpandTypesForGetCapacityReservationGroups;
(function (KnownExpandTypesForGetCapacityReservationGroups) {
    KnownExpandTypesForGetCapacityReservationGroups["VirtualMachineScaleSetVMsRef"] = "virtualMachineScaleSetVMs/$ref";
    KnownExpandTypesForGetCapacityReservationGroups["VirtualMachinesRef"] = "virtualMachines/$ref";
})(KnownExpandTypesForGetCapacityReservationGroups || (KnownExpandTypesForGetCapacityReservationGroups = {}));
/** Known values of {@link CapacityReservationInstanceViewTypes} that the service accepts. */
export var KnownCapacityReservationInstanceViewTypes;
(function (KnownCapacityReservationInstanceViewTypes) {
    KnownCapacityReservationInstanceViewTypes["InstanceView"] = "instanceView";
})(KnownCapacityReservationInstanceViewTypes || (KnownCapacityReservationInstanceViewTypes = {}));
/** Known values of {@link VMGuestPatchRebootBehavior} that the service accepts. */
export var KnownVMGuestPatchRebootBehavior;
(function (KnownVMGuestPatchRebootBehavior) {
    KnownVMGuestPatchRebootBehavior["Unknown"] = "Unknown";
    KnownVMGuestPatchRebootBehavior["NeverReboots"] = "NeverReboots";
    KnownVMGuestPatchRebootBehavior["AlwaysRequiresReboot"] = "AlwaysRequiresReboot";
    KnownVMGuestPatchRebootBehavior["CanRequestReboot"] = "CanRequestReboot";
})(KnownVMGuestPatchRebootBehavior || (KnownVMGuestPatchRebootBehavior = {}));
/** Known values of {@link PatchAssessmentState} that the service accepts. */
export var KnownPatchAssessmentState;
(function (KnownPatchAssessmentState) {
    KnownPatchAssessmentState["Unknown"] = "Unknown";
    KnownPatchAssessmentState["Available"] = "Available";
})(KnownPatchAssessmentState || (KnownPatchAssessmentState = {}));
/** Known values of {@link VMGuestPatchRebootSetting} that the service accepts. */
export var KnownVMGuestPatchRebootSetting;
(function (KnownVMGuestPatchRebootSetting) {
    KnownVMGuestPatchRebootSetting["IfRequired"] = "IfRequired";
    KnownVMGuestPatchRebootSetting["Never"] = "Never";
    KnownVMGuestPatchRebootSetting["Always"] = "Always";
})(KnownVMGuestPatchRebootSetting || (KnownVMGuestPatchRebootSetting = {}));
/** Known values of {@link VMGuestPatchClassificationWindows} that the service accepts. */
export var KnownVMGuestPatchClassificationWindows;
(function (KnownVMGuestPatchClassificationWindows) {
    KnownVMGuestPatchClassificationWindows["Critical"] = "Critical";
    KnownVMGuestPatchClassificationWindows["Security"] = "Security";
    KnownVMGuestPatchClassificationWindows["UpdateRollUp"] = "UpdateRollUp";
    KnownVMGuestPatchClassificationWindows["FeaturePack"] = "FeaturePack";
    KnownVMGuestPatchClassificationWindows["ServicePack"] = "ServicePack";
    KnownVMGuestPatchClassificationWindows["Definition"] = "Definition";
    KnownVMGuestPatchClassificationWindows["Tools"] = "Tools";
    KnownVMGuestPatchClassificationWindows["Updates"] = "Updates";
})(KnownVMGuestPatchClassificationWindows || (KnownVMGuestPatchClassificationWindows = {}));
/** Known values of {@link VMGuestPatchClassificationLinux} that the service accepts. */
export var KnownVMGuestPatchClassificationLinux;
(function (KnownVMGuestPatchClassificationLinux) {
    KnownVMGuestPatchClassificationLinux["Critical"] = "Critical";
    KnownVMGuestPatchClassificationLinux["Security"] = "Security";
    KnownVMGuestPatchClassificationLinux["Other"] = "Other";
})(KnownVMGuestPatchClassificationLinux || (KnownVMGuestPatchClassificationLinux = {}));
/** Known values of {@link VMGuestPatchRebootStatus} that the service accepts. */
export var KnownVMGuestPatchRebootStatus;
(function (KnownVMGuestPatchRebootStatus) {
    KnownVMGuestPatchRebootStatus["Unknown"] = "Unknown";
    KnownVMGuestPatchRebootStatus["NotNeeded"] = "NotNeeded";
    KnownVMGuestPatchRebootStatus["Required"] = "Required";
    KnownVMGuestPatchRebootStatus["Started"] = "Started";
    KnownVMGuestPatchRebootStatus["Failed"] = "Failed";
    KnownVMGuestPatchRebootStatus["Completed"] = "Completed";
})(KnownVMGuestPatchRebootStatus || (KnownVMGuestPatchRebootStatus = {}));
/** Known values of {@link PatchInstallationState} that the service accepts. */
export var KnownPatchInstallationState;
(function (KnownPatchInstallationState) {
    KnownPatchInstallationState["Unknown"] = "Unknown";
    KnownPatchInstallationState["Installed"] = "Installed";
    KnownPatchInstallationState["Failed"] = "Failed";
    KnownPatchInstallationState["Excluded"] = "Excluded";
    KnownPatchInstallationState["NotSelected"] = "NotSelected";
    KnownPatchInstallationState["Pending"] = "Pending";
})(KnownPatchInstallationState || (KnownPatchInstallationState = {}));
/** Known values of {@link ExpandTypesForGetVMScaleSets} that the service accepts. */
export var KnownExpandTypesForGetVMScaleSets;
(function (KnownExpandTypesForGetVMScaleSets) {
    KnownExpandTypesForGetVMScaleSets["UserData"] = "userData";
})(KnownExpandTypesForGetVMScaleSets || (KnownExpandTypesForGetVMScaleSets = {}));
/** Known values of {@link OrchestrationServiceNames} that the service accepts. */
export var KnownOrchestrationServiceNames;
(function (KnownOrchestrationServiceNames) {
    KnownOrchestrationServiceNames["AutomaticRepairs"] = "AutomaticRepairs";
    KnownOrchestrationServiceNames["DummyOrchestrationServiceName"] = "DummyOrchestrationServiceName";
})(KnownOrchestrationServiceNames || (KnownOrchestrationServiceNames = {}));
/** Known values of {@link OrchestrationServiceState} that the service accepts. */
export var KnownOrchestrationServiceState;
(function (KnownOrchestrationServiceState) {
    KnownOrchestrationServiceState["NotRunning"] = "NotRunning";
    KnownOrchestrationServiceState["Running"] = "Running";
    KnownOrchestrationServiceState["Suspended"] = "Suspended";
})(KnownOrchestrationServiceState || (KnownOrchestrationServiceState = {}));
/** Known values of {@link OrchestrationServiceStateAction} that the service accepts. */
export var KnownOrchestrationServiceStateAction;
(function (KnownOrchestrationServiceStateAction) {
    KnownOrchestrationServiceStateAction["Resume"] = "Resume";
    KnownOrchestrationServiceStateAction["Suspend"] = "Suspend";
})(KnownOrchestrationServiceStateAction || (KnownOrchestrationServiceStateAction = {}));
/** Known values of {@link ExecutionState} that the service accepts. */
export var KnownExecutionState;
(function (KnownExecutionState) {
    KnownExecutionState["Unknown"] = "Unknown";
    KnownExecutionState["Pending"] = "Pending";
    KnownExecutionState["Running"] = "Running";
    KnownExecutionState["Failed"] = "Failed";
    KnownExecutionState["Succeeded"] = "Succeeded";
    KnownExecutionState["TimedOut"] = "TimedOut";
    KnownExecutionState["Canceled"] = "Canceled";
})(KnownExecutionState || (KnownExecutionState = {}));
/** Known values of {@link ExtendedLocationType} that the service accepts. */
export var KnownExtendedLocationType;
(function (KnownExtendedLocationType) {
    KnownExtendedLocationType["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationType || (KnownExtendedLocationType = {}));
/** Known values of {@link DiskStorageAccountTypes} that the service accepts. */
export var KnownDiskStorageAccountTypes;
(function (KnownDiskStorageAccountTypes) {
    /** Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. */
    KnownDiskStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    /** Premium SSD locally redundant storage. Best for production and performance sensitive workloads. */
    KnownDiskStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    /** Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test. */
    KnownDiskStorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
    /** Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads. */
    KnownDiskStorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
    /** Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures. */
    KnownDiskStorageAccountTypes["PremiumZRS"] = "Premium_ZRS";
    /** Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev/test that need storage resiliency against zone failures. */
    KnownDiskStorageAccountTypes["StandardSSDZRS"] = "StandardSSD_ZRS";
})(KnownDiskStorageAccountTypes || (KnownDiskStorageAccountTypes = {}));
/** Known values of {@link HyperVGeneration} that the service accepts. */
export var KnownHyperVGeneration;
(function (KnownHyperVGeneration) {
    KnownHyperVGeneration["V1"] = "V1";
    KnownHyperVGeneration["V2"] = "V2";
})(KnownHyperVGeneration || (KnownHyperVGeneration = {}));
/** Known values of {@link DiskCreateOption} that the service accepts. */
export var KnownDiskCreateOption;
(function (KnownDiskCreateOption) {
    /** Create an empty data disk of a size given by diskSizeGB. */
    KnownDiskCreateOption["Empty"] = "Empty";
    /** Disk will be attached to a VM. */
    KnownDiskCreateOption["Attach"] = "Attach";
    /** Create a new disk from a platform image specified by the given imageReference or galleryImageReference. */
    KnownDiskCreateOption["FromImage"] = "FromImage";
    /** Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId. */
    KnownDiskCreateOption["Import"] = "Import";
    /** Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId. */
    KnownDiskCreateOption["Copy"] = "Copy";
    /** Create a new disk by copying from a backup recovery point. */
    KnownDiskCreateOption["Restore"] = "Restore";
    /** Create a new disk by obtaining a write token and using it to directly upload the contents of the disk. */
    KnownDiskCreateOption["Upload"] = "Upload";
    /** Create a new disk by using a deep copy process, where the resource creation is considered complete only after all data has been copied from the source. */
    KnownDiskCreateOption["CopyStart"] = "CopyStart";
    /** Similar to Import create option. Create a new Trusted Launch VM or Confidential VM supported disk by importing additional blob for VM guest state specified by securityDataUri in storage account specified by storageAccountId */
    KnownDiskCreateOption["ImportSecure"] = "ImportSecure";
    /** Similar to Upload create option. Create a new Trusted Launch VM or Confidential VM supported disk and upload using write token in both disk and VM guest state */
    KnownDiskCreateOption["UploadPreparedSecure"] = "UploadPreparedSecure";
})(KnownDiskCreateOption || (KnownDiskCreateOption = {}));
/** Known values of {@link DiskState} that the service accepts. */
export var KnownDiskState;
(function (KnownDiskState) {
    /** The disk is not being used and can be attached to a VM. */
    KnownDiskState["Unattached"] = "Unattached";
    /** The disk is currently attached to a running VM. */
    KnownDiskState["Attached"] = "Attached";
    /** The disk is attached to a stopped-deallocated VM. */
    KnownDiskState["Reserved"] = "Reserved";
    /** The disk is attached to a VM which is in hibernated state. */
    KnownDiskState["Frozen"] = "Frozen";
    /** The disk currently has an Active SAS Uri associated with it. */
    KnownDiskState["ActiveSAS"] = "ActiveSAS";
    /** The disk is attached to a VM in hibernated state and has an active SAS URI associated with it. */
    KnownDiskState["ActiveSASFrozen"] = "ActiveSASFrozen";
    /** A disk is ready to be created by upload by requesting a write token. */
    KnownDiskState["ReadyToUpload"] = "ReadyToUpload";
    /** A disk is created for upload and a write token has been issued for uploading to it. */
    KnownDiskState["ActiveUpload"] = "ActiveUpload";
})(KnownDiskState || (KnownDiskState = {}));
/** Known values of {@link EncryptionType} that the service accepts. */
export var KnownEncryptionType;
(function (KnownEncryptionType) {
    /** Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets. */
    KnownEncryptionType["EncryptionAtRestWithPlatformKey"] = "EncryptionAtRestWithPlatformKey";
    /** Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
    KnownEncryptionType["EncryptionAtRestWithCustomerKey"] = "EncryptionAtRestWithCustomerKey";
    /** Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
    KnownEncryptionType["EncryptionAtRestWithPlatformAndCustomerKeys"] = "EncryptionAtRestWithPlatformAndCustomerKeys";
})(KnownEncryptionType || (KnownEncryptionType = {}));
/** Known values of {@link NetworkAccessPolicy} that the service accepts. */
export var KnownNetworkAccessPolicy;
(function (KnownNetworkAccessPolicy) {
    /** The disk can be exported or uploaded to from any network. */
    KnownNetworkAccessPolicy["AllowAll"] = "AllowAll";
    /** The disk can be exported or uploaded to using a DiskAccess resource's private endpoints. */
    KnownNetworkAccessPolicy["AllowPrivate"] = "AllowPrivate";
    /** The disk cannot be exported. */
    KnownNetworkAccessPolicy["DenyAll"] = "DenyAll";
})(KnownNetworkAccessPolicy || (KnownNetworkAccessPolicy = {}));
/** Known values of {@link DiskSecurityTypes} that the service accepts. */
export var KnownDiskSecurityTypes;
(function (KnownDiskSecurityTypes) {
    /** Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM) */
    KnownDiskSecurityTypes["TrustedLaunch"] = "TrustedLaunch";
    /** Indicates Confidential VM disk with only VM guest state encrypted */
    KnownDiskSecurityTypes["ConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey"] = "ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey";
    /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a platform managed key */
    KnownDiskSecurityTypes["ConfidentialVMDiskEncryptedWithPlatformKey"] = "ConfidentialVM_DiskEncryptedWithPlatformKey";
    /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a customer managed key */
    KnownDiskSecurityTypes["ConfidentialVMDiskEncryptedWithCustomerKey"] = "ConfidentialVM_DiskEncryptedWithCustomerKey";
})(KnownDiskSecurityTypes || (KnownDiskSecurityTypes = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    /** You can generate a SAS URI to access the underlying data of the disk publicly on the internet when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** You cannot access the underlying data of the disk publicly on the internet even when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link AccessLevel} that the service accepts. */
export var KnownAccessLevel;
(function (KnownAccessLevel) {
    KnownAccessLevel["None"] = "None";
    KnownAccessLevel["Read"] = "Read";
    KnownAccessLevel["Write"] = "Write";
})(KnownAccessLevel || (KnownAccessLevel = {}));
/** Known values of {@link SnapshotStorageAccountTypes} that the service accepts. */
export var KnownSnapshotStorageAccountTypes;
(function (KnownSnapshotStorageAccountTypes) {
    /** Standard HDD locally redundant storage */
    KnownSnapshotStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    /** Premium SSD locally redundant storage */
    KnownSnapshotStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    /** Standard zone redundant storage */
    KnownSnapshotStorageAccountTypes["StandardZRS"] = "Standard_ZRS";
})(KnownSnapshotStorageAccountTypes || (KnownSnapshotStorageAccountTypes = {}));
/** Known values of {@link DiskEncryptionSetIdentityType} that the service accepts. */
export var KnownDiskEncryptionSetIdentityType;
(function (KnownDiskEncryptionSetIdentityType) {
    KnownDiskEncryptionSetIdentityType["SystemAssigned"] = "SystemAssigned";
    KnownDiskEncryptionSetIdentityType["None"] = "None";
})(KnownDiskEncryptionSetIdentityType || (KnownDiskEncryptionSetIdentityType = {}));
/** Known values of {@link DiskEncryptionSetType} that the service accepts. */
export var KnownDiskEncryptionSetType;
(function (KnownDiskEncryptionSetType) {
    /** Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
    KnownDiskEncryptionSetType["EncryptionAtRestWithCustomerKey"] = "EncryptionAtRestWithCustomerKey";
    /** Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
    KnownDiskEncryptionSetType["EncryptionAtRestWithPlatformAndCustomerKeys"] = "EncryptionAtRestWithPlatformAndCustomerKeys";
    /** Confidential VM supported disk and VM guest state would be encrypted with customer managed key. */
    KnownDiskEncryptionSetType["ConfidentialVmEncryptedWithCustomerKey"] = "ConfidentialVmEncryptedWithCustomerKey";
})(KnownDiskEncryptionSetType || (KnownDiskEncryptionSetType = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export var KnownPrivateEndpointServiceConnectionStatus;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(KnownPrivateEndpointServiceConnectionStatus || (KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export var KnownPrivateEndpointConnectionProvisioningState;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link GalleryPropertiesProvisioningState} that the service accepts. */
export var KnownGalleryPropertiesProvisioningState;
(function (KnownGalleryPropertiesProvisioningState) {
    KnownGalleryPropertiesProvisioningState["Creating"] = "Creating";
    KnownGalleryPropertiesProvisioningState["Updating"] = "Updating";
    KnownGalleryPropertiesProvisioningState["Failed"] = "Failed";
    KnownGalleryPropertiesProvisioningState["Succeeded"] = "Succeeded";
    KnownGalleryPropertiesProvisioningState["Deleting"] = "Deleting";
    KnownGalleryPropertiesProvisioningState["Migrating"] = "Migrating";
})(KnownGalleryPropertiesProvisioningState || (KnownGalleryPropertiesProvisioningState = {}));
/** Known values of {@link GallerySharingPermissionTypes} that the service accepts. */
export var KnownGallerySharingPermissionTypes;
(function (KnownGallerySharingPermissionTypes) {
    KnownGallerySharingPermissionTypes["Private"] = "Private";
    KnownGallerySharingPermissionTypes["Groups"] = "Groups";
})(KnownGallerySharingPermissionTypes || (KnownGallerySharingPermissionTypes = {}));
/** Known values of {@link SharingProfileGroupTypes} that the service accepts. */
export var KnownSharingProfileGroupTypes;
(function (KnownSharingProfileGroupTypes) {
    KnownSharingProfileGroupTypes["Subscriptions"] = "Subscriptions";
    KnownSharingProfileGroupTypes["AADTenants"] = "AADTenants";
    KnownSharingProfileGroupTypes["Community"] = "Community";
})(KnownSharingProfileGroupTypes || (KnownSharingProfileGroupTypes = {}));
/** Known values of {@link SharingState} that the service accepts. */
export var KnownSharingState;
(function (KnownSharingState) {
    KnownSharingState["Succeeded"] = "Succeeded";
    KnownSharingState["InProgress"] = "InProgress";
    KnownSharingState["Failed"] = "Failed";
    KnownSharingState["Unknown"] = "Unknown";
})(KnownSharingState || (KnownSharingState = {}));
/** Known values of {@link SelectPermissions} that the service accepts. */
export var KnownSelectPermissions;
(function (KnownSelectPermissions) {
    KnownSelectPermissions["Permissions"] = "Permissions";
})(KnownSelectPermissions || (KnownSelectPermissions = {}));
/** Known values of {@link GalleryExpandParams} that the service accepts. */
export var KnownGalleryExpandParams;
(function (KnownGalleryExpandParams) {
    KnownGalleryExpandParams["SharingProfileGroups"] = "SharingProfile/Groups";
})(KnownGalleryExpandParams || (KnownGalleryExpandParams = {}));
/** Known values of {@link GalleryImagePropertiesProvisioningState} that the service accepts. */
export var KnownGalleryImagePropertiesProvisioningState;
(function (KnownGalleryImagePropertiesProvisioningState) {
    KnownGalleryImagePropertiesProvisioningState["Creating"] = "Creating";
    KnownGalleryImagePropertiesProvisioningState["Updating"] = "Updating";
    KnownGalleryImagePropertiesProvisioningState["Failed"] = "Failed";
    KnownGalleryImagePropertiesProvisioningState["Succeeded"] = "Succeeded";
    KnownGalleryImagePropertiesProvisioningState["Deleting"] = "Deleting";
    KnownGalleryImagePropertiesProvisioningState["Migrating"] = "Migrating";
})(KnownGalleryImagePropertiesProvisioningState || (KnownGalleryImagePropertiesProvisioningState = {}));
/** Known values of {@link StorageAccountType} that the service accepts. */
export var KnownStorageAccountType;
(function (KnownStorageAccountType) {
    KnownStorageAccountType["StandardLRS"] = "Standard_LRS";
    KnownStorageAccountType["StandardZRS"] = "Standard_ZRS";
    KnownStorageAccountType["PremiumLRS"] = "Premium_LRS";
})(KnownStorageAccountType || (KnownStorageAccountType = {}));
/** Known values of {@link ConfidentialVMEncryptionType} that the service accepts. */
export var KnownConfidentialVMEncryptionType;
(function (KnownConfidentialVMEncryptionType) {
    KnownConfidentialVMEncryptionType["EncryptedVMGuestStateOnlyWithPmk"] = "EncryptedVMGuestStateOnlyWithPmk";
    KnownConfidentialVMEncryptionType["EncryptedWithPmk"] = "EncryptedWithPmk";
    KnownConfidentialVMEncryptionType["EncryptedWithCmk"] = "EncryptedWithCmk";
})(KnownConfidentialVMEncryptionType || (KnownConfidentialVMEncryptionType = {}));
/** Known values of {@link ReplicationMode} that the service accepts. */
export var KnownReplicationMode;
(function (KnownReplicationMode) {
    KnownReplicationMode["Full"] = "Full";
    KnownReplicationMode["Shallow"] = "Shallow";
})(KnownReplicationMode || (KnownReplicationMode = {}));
/** Known values of {@link GalleryExtendedLocationType} that the service accepts. */
export var KnownGalleryExtendedLocationType;
(function (KnownGalleryExtendedLocationType) {
    KnownGalleryExtendedLocationType["EdgeZone"] = "EdgeZone";
    KnownGalleryExtendedLocationType["Unknown"] = "Unknown";
})(KnownGalleryExtendedLocationType || (KnownGalleryExtendedLocationType = {}));
/** Known values of {@link GalleryImageVersionPropertiesProvisioningState} that the service accepts. */
export var KnownGalleryImageVersionPropertiesProvisioningState;
(function (KnownGalleryImageVersionPropertiesProvisioningState) {
    KnownGalleryImageVersionPropertiesProvisioningState["Creating"] = "Creating";
    KnownGalleryImageVersionPropertiesProvisioningState["Updating"] = "Updating";
    KnownGalleryImageVersionPropertiesProvisioningState["Failed"] = "Failed";
    KnownGalleryImageVersionPropertiesProvisioningState["Succeeded"] = "Succeeded";
    KnownGalleryImageVersionPropertiesProvisioningState["Deleting"] = "Deleting";
    KnownGalleryImageVersionPropertiesProvisioningState["Migrating"] = "Migrating";
})(KnownGalleryImageVersionPropertiesProvisioningState || (KnownGalleryImageVersionPropertiesProvisioningState = {}));
/** Known values of {@link AggregatedReplicationState} that the service accepts. */
export var KnownAggregatedReplicationState;
(function (KnownAggregatedReplicationState) {
    KnownAggregatedReplicationState["Unknown"] = "Unknown";
    KnownAggregatedReplicationState["InProgress"] = "InProgress";
    KnownAggregatedReplicationState["Completed"] = "Completed";
    KnownAggregatedReplicationState["Failed"] = "Failed";
})(KnownAggregatedReplicationState || (KnownAggregatedReplicationState = {}));
/** Known values of {@link ReplicationState} that the service accepts. */
export var KnownReplicationState;
(function (KnownReplicationState) {
    KnownReplicationState["Unknown"] = "Unknown";
    KnownReplicationState["Replicating"] = "Replicating";
    KnownReplicationState["Completed"] = "Completed";
    KnownReplicationState["Failed"] = "Failed";
})(KnownReplicationState || (KnownReplicationState = {}));
/** Known values of {@link ReplicationStatusTypes} that the service accepts. */
export var KnownReplicationStatusTypes;
(function (KnownReplicationStatusTypes) {
    KnownReplicationStatusTypes["ReplicationStatus"] = "ReplicationStatus";
})(KnownReplicationStatusTypes || (KnownReplicationStatusTypes = {}));
/** Known values of {@link GalleryApplicationVersionPropertiesProvisioningState} that the service accepts. */
export var KnownGalleryApplicationVersionPropertiesProvisioningState;
(function (KnownGalleryApplicationVersionPropertiesProvisioningState) {
    KnownGalleryApplicationVersionPropertiesProvisioningState["Creating"] = "Creating";
    KnownGalleryApplicationVersionPropertiesProvisioningState["Updating"] = "Updating";
    KnownGalleryApplicationVersionPropertiesProvisioningState["Failed"] = "Failed";
    KnownGalleryApplicationVersionPropertiesProvisioningState["Succeeded"] = "Succeeded";
    KnownGalleryApplicationVersionPropertiesProvisioningState["Deleting"] = "Deleting";
    KnownGalleryApplicationVersionPropertiesProvisioningState["Migrating"] = "Migrating";
})(KnownGalleryApplicationVersionPropertiesProvisioningState || (KnownGalleryApplicationVersionPropertiesProvisioningState = {}));
/** Known values of {@link SharingUpdateOperationTypes} that the service accepts. */
export var KnownSharingUpdateOperationTypes;
(function (KnownSharingUpdateOperationTypes) {
    KnownSharingUpdateOperationTypes["Add"] = "Add";
    KnownSharingUpdateOperationTypes["Remove"] = "Remove";
    KnownSharingUpdateOperationTypes["Reset"] = "Reset";
    KnownSharingUpdateOperationTypes["EnableCommunity"] = "EnableCommunity";
})(KnownSharingUpdateOperationTypes || (KnownSharingUpdateOperationTypes = {}));
/** Known values of {@link SharedToValues} that the service accepts. */
export var KnownSharedToValues;
(function (KnownSharedToValues) {
    KnownSharedToValues["Tenant"] = "tenant";
})(KnownSharedToValues || (KnownSharedToValues = {}));
/** Known values of {@link CloudServiceUpgradeMode} that the service accepts. */
export var KnownCloudServiceUpgradeMode;
(function (KnownCloudServiceUpgradeMode) {
    KnownCloudServiceUpgradeMode["Auto"] = "Auto";
    KnownCloudServiceUpgradeMode["Manual"] = "Manual";
    KnownCloudServiceUpgradeMode["Simultaneous"] = "Simultaneous";
})(KnownCloudServiceUpgradeMode || (KnownCloudServiceUpgradeMode = {}));
/** Known values of {@link AvailabilitySetSkuTypes} that the service accepts. */
export var KnownAvailabilitySetSkuTypes;
(function (KnownAvailabilitySetSkuTypes) {
    KnownAvailabilitySetSkuTypes["Classic"] = "Classic";
    KnownAvailabilitySetSkuTypes["Aligned"] = "Aligned";
})(KnownAvailabilitySetSkuTypes || (KnownAvailabilitySetSkuTypes = {}));
//# sourceMappingURL=index.js.map